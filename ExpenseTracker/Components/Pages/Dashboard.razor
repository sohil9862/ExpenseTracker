@page "/Dashboard"
@using System.Text.Json
@using DataModel.Model
@inject NavigationManager Nav
@inject TransactionService TransactionService

<style>
    /* Container Layout */
    .dashboard-container {
        display: grid;
        grid-template-areas:
            "balance buttons"
            "charts charts"
            "details details";
        gap: 30px;
        padding: 30px;
        background-color: #f4f7fc;
    }

    /* Balance Section */
    .balance-section {
        grid-area: balance;
        font-size: 32px;
        font-weight: 600;
        color: #2c3e50;
        background-color: #ecf0f1;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    /* Buttons Section */
    .buttons-section {
        grid-area: buttons;
        display: flex;
        gap: 20px;
        justify-content: center;
        margin-top: 20px;
    }

    .btn {
        font-size: 16px;
        padding: 10px 20px;
        border-radius: 8px;
        transition: all 0.3s ease;
        font-weight: bold;
    }

    .btn-history {
        background-color: #3498db; /* Light Blue */
        color: white;
    }

    .btn-add {
        background-color: #2ecc71; /* Green */
        color: white;
    }

    .btn-export {
        background-color: #9b59b6; /* Purple */
        color: white;
    }

    .btn-logout {
        background-color: #e74c3c; /* Red */
        color: white;
    }

    /* Button Hover Effects */
    .btn:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    /* Charts Section */
    .charts-section {
        grid-area: charts;
        display: flex;
        justify-content: space-between;
        gap: 20px;
    }

    .chart {
        width: 48%;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .chart-circle {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background-color: #ddd;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        font-weight: bold;
        margin: 10px auto;
    }

    .details-section {
        grid-area: details;
        display: flex;
        justify-content: space-between;
        gap: 30px;
        margin-top: 30px;
    }

    .debts-section, .summary-section, .transactions-section {
        width: 32%;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .debt-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding: 10px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

        /* Debt Section Button Styles */
        .debt-item button {
            font-size: 14px;
            padding: 5px 12px;
            border-radius: 6px;
        }

    .dashboard-stats {
        margin-top: 20px;
    }

    .stat {
        margin-bottom: 20px;
    }

        .stat h4 {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .stat .amount {
            font-size: 2rem;
            font-weight: 600;
            color: #28a745; /* Green for Cash Flow In */
        }

            .stat .amount.danger {
                color: #dc3545; /* Red for Cash Flow Out */
            }

    .transaction-box {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .transaction-box strong {
            font-size: 1.2em;
            color: #333;
        }

    .transaction-details p {
        margin: 5px 0;
        color: #555;
    }

    .transaction-box:hover {
        background-color: #f1f1f1;
    }


    /* List Style */
    ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }
</style>

<!-- Total Balance -->
<div>
    <p><strong>Total Balance:</strong> Rs. @currentBalance</p>
</div>

<!-- Cash Flow In and Out -->
<div class="dashboard-container">
    <div>
        <p><strong>Cash Flow In: </strong>Rs. @CashFlowIn</p>
        <p><strong>Cash Flow Out: </strong>Rs. @CashFlowOut</p>
    </div>
</div>

<!-- Buttons Section -->
<div class="buttons-section">
    <button class="btn btn-history" @onclick="GoToHistory">History</button>
    <button class="btn btn-add" @onclick="GoToAddTransaction">Add Transaction</button>
    <button class="btn btn-export">Export</button>
    <button class="btn btn-logout" @onclick="Logout">Log Out</button>
    <button class="btn btn-warning" @onclick="NavigateToPendingDebts">Pending Debts</button>
</div>

<!-- Transaction Display Section -->
<h4>Recent Transactions</h4>

@foreach (var transaction in Transactions)
{
    <div class="transaction-box mb-3 p-3 border rounded">
        <strong class="d-block mb-2">@transaction.Type</strong>
        <div class="transaction-details">
            <p><strong>Amount:</strong> Rs. @transaction.Amount</p>
            <p><strong>Note:</strong> @transaction.Notes</p>
            <p><strong>Tag:</strong> @transaction.Tag</p>
            <p><strong>Date:</strong> @transaction.TransactionDate.ToString("yyyy/MM/dd")</p>
        </div>
    </div>
}

@code {
    private decimal currentBalance { get; set; }
    private decimal CashFlowIn { get; set; }
    private decimal CashFlowOut { get; set; }
    private List<Transaction> Transactions { get; set; } = new List<Transaction>();
    private const int MaxTransactionsToShow = 5; // Show the latest 5 transactions

    protected override void OnInitialized()
    {
        LoadTransactionData();
    }

    private void LoadTransactionData()
    {
        var transactions = TransactionService.GetTransactions();

        // Update the list of transactions to display
        Transactions = transactions.OrderByDescending(t => t.TransactionDate).Take(MaxTransactionsToShow).ToList();

        // Update cash flow in and out
        CashFlowIn = transactions.Where(t => t.Type == "Credit").Sum(t => t.Amount);
        CashFlowOut = transactions.Where(t => t.Type == "Debit").Sum(t => t.Amount);

        // Update total balance
        currentBalance = TransactionService.GetCurrentBalance();

        // Refresh the UI
        StateHasChanged();
    }

    private async Task ClearHistory()
    {
        // Clear transactions from the service
        await TransactionService.ClearTransactionsAsync();

        // Clear the displayed transactions
        Transactions.Clear();

        // Reset the balance to 1000
        currentBalance = TransactionService.GetCurrentBalance();

        // Optionally, reload the UI
        StateHasChanged();
    }

    private void GoToAddTransaction()
    {
        Nav.NavigateTo("/AddTransaction");
    }

    private void Logout()
    {
        Nav.NavigateTo("/Login");
    }

    private void GoToHistory()
    {
        Nav.NavigateTo("/History");
    }

    private void NavigateToPendingDebts()
    {
        Nav.NavigateTo("/PendingDebts");
    }
}

